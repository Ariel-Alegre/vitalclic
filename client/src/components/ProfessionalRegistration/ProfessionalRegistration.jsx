// src/components/Form.js
import React, { useState,useRef, useEffect } from "react";
import {
  TextField,
  Button,
  FormControl,
  FormControlLabel,
  Checkbox,
  Grid,
  Typography,
  MenuItem,
  Select,
  InputLabel,
  OutlinedInput,
  ListItemText,Radio ,
  FormLabel, RadioGroup,
  IconButton, InputAdornment 


} from "@mui/material";
import { es } from "date-fns/locale"; // Puedes cambiar el idioma de fecha
import { DatePicker, LocalizationProvider } from "@mui/x-date-pickers";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns"; // Importar AdapterDateFns
import axios from 'axios';
import CircularProgress from "@mui/material/CircularProgress";
import Alert from '@mui/material/Alert';
import Snackbar from '@mui/material/Snackbar';
import { Visibility, VisibilityOff } from "@mui/icons-material";
import { Link, useNavigate } from "react-router-dom";
import {
  LoadScript,
  Autocomplete,
  useLoadScript,
} from "@react-google-maps/api";
const specialtiesMedica = [
  "Cardiolog√≠a",
  "Dermatolog√≠a",
  "Endocrinolog√≠a",
  "Gastroenterolog√≠a",
  "Gen√©tica",
  "Geriatr√≠a",
  "Ginecolog√≠a y Obstetricia",
  "Hematolog√≠a",
  "Inmunolog√≠a y Alergia",
  "Medicina de Enfermedades Infecciosas y Tropicales",
  "Medicina F√≠sica y de Rehabilitaci√≥n",
  "Medicina Interna",
  "Medicina Oncologica",
  "Nefrolog√≠a",
  "Neonatolog√≠a",
  "Neumolog√≠a",
  "Neurolog√≠a",
  "Pediatr√≠a",
  "Psiquiatr√≠a",
  "Reumatolog√≠a"
];
const ITEM_HEIGHT = 48;
const ITEM_PADDING_TOP = 8;
const MenuProps = {
  PaperProps: {
    style: {
      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,
      width: 250,
    },
  },
};
const API_KEY = "AIzaSyBMqv1fgtsDEQQgm4kmLBRtZI7zu-wSldA"; // üîπ Reemplaza con tu clave de Google Maps
const libraries = ["places"];
const ProfessionalRegistration = () => {
  const navigate = useNavigate()
    const [showPassword, setShowPassword] = useState(false);
  
  const handleClickShowPassword = () => {
    setShowPassword(!showPassword);
  };
  const [formData, setFormData] = useState({
    name: "",
    lastName: "",
    professional_college: "",
    registration_number: "",
    specialty_number_rne: "",
    genre: "",
    birthdate: null,
    email: "",
    country: "",
    province: "",
    district: "",
    specialty: [],
    phone: "",
    emergencyServices: "no",
    password: "",
    termsAccepted: false,
    termsAcceptedAt: null,
  });
  const autocompleteRef = useRef(null);

    const onPlaceChanged = () => {
      if (autocompleteRef.current) {
        const place = autocompleteRef.current.getPlace();
  
        if (place?.geometry) {
          const addressComponents = place.address_components;
          if (addressComponents) {
            // Extraer el pa√≠s (country)
            const country = addressComponents.find((component) =>
              component.types.includes("country")
            );
  
            // Filtrar todos los departamentos/estados (administrative_area_level_1)
            const departments = addressComponents.filter((component) =>
              component.types.includes("administrative_area_level_1")
            );
  
            // Filtrar todas las provincias (administrative_area_level_1)
            const provinces = addressComponents.filter((component) =>
              component.types.includes("administrative_area_level_1")
            );
  
            // Filtrar todos los distritos (administrative_area_level_2)
            const districts = addressComponents.filter((component) =>
              component.types.includes("administrative_area_level_2")
            );
  
    
  
            // Actualizar el estado con las listas de componentes
            setFormData({
              ...formData,
              country: country ? country.long_name : "",
              departments: departments.map((dep) => dep.long_name), // M√∫ltiples departamentos
              provinces: provinces.map((prov) => prov.long_name), // M√∫ltiples provincias
              districts: districts.map((dist) => dist.long_name), // M√∫ltiples distritos
            });
          } else {
            console.error("No se pudo obtener los componentes de la direcci√≥n.");
          }
        } else {
          console.error("No se pudo obtener la informaci√≥n de geometr√≠a.");
        }
      }
    };
  const [loading, setLoading] = useState(false);
  const [openAlertError, setOpenAlertError] = React.useState(false);

 

  const handleCloseAlertError = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }

    setOpenAlertError(false);
  };
  const handleChange = (e) => {
    const { name, value } = e.target;
    if (name === "specialty") {
      // Actualizar el array de especialidades
      setFormData((prev) => ({
        ...prev,
        [name]: typeof value === "string" ? value.split(",") : value,
      }));
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };
  const handleCheckboxChange = (e) => {
    setFormData((prev) => ({
      ...prev,
      termsAccepted: e.target.checked,
      termsAcceptedAt: e.target.checked ? new Date() : null,
    }));
  };

  const handleDateChange = (date) => {
    setFormData((prev) => ({ ...prev, birthdate: date }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault(); // Evita la recarga de la p√°gina
    
    setLoading(true); // Indica que la solicitud est√° en proceso
  
    try {
      // Env√≠o de datos al backend
      await axios.post("https://vitalclic-production.up.railway.app/api/register-professional", formData);
  
      // Redirige a la p√°gina de √©xito
      navigate("/registro/profesional-exitosa");
  
    } catch (error) {
      console.error("Error al enviar el formulario:", error);
  
      // Verifica si el error es un 404 (email ya registrado)
      if (error.response?.status === 404) {
        alert("El email ya est√° registrado como profesional");
      }
  
    } finally {
      setLoading(false); // Se ejecuta siempre, √©xito o error
    }
  };
   const school = [
    "Colegio m√©dico del Per√∫",
    "Colegio de enfermeros del Per√∫",
    "Colegio de nutricionistas del Per√∫",
    "Colegio de obstetras del Per√∫",
    "Colegio odontol√≥gico del Per√∫",
    "Colegio m√©dico veterinario del Per√∫",
    "Asociaci√≥n de enfermeros t√©cnicos del Per√∫",


   ]

  return (
    <LocalizationProvider dateAdapter={AdapterDateFns} locale={es}>
      {" "}
      {/* Cambi√© a AdapterDateFns */}
      <form onSubmit={handleSubmit} style={{ padding: "2rem", marginTop: "5em" }}>
        <Typography variant="h4" gutterBottom>
          Registro de profesional
        </Typography>
        <Grid container spacing={3}>
        <Grid item xs={12} sm={3}>
            <TextField
              label="DNI"
              name="dni"
              value={formData.dni}
              onChange={handleChange}
              fullWidth
              required
              sx={{
                "& .MuiOutlinedInput-root": {
                  "&:hover fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde al pasar el mouse
                  },
                  "&.Mui-focused fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde cuando el campo est√° enfocado
                  },
                },
                "& .MuiInputLabel-root": {
                  color: "#000", // Color del label por defecto
                },
                "& .MuiInputLabel-root.Mui-focused": {
                  color: "#53676c", // Cambia el color del label cuando est√° enfocado
                },
              }}
              autoComplete="off"
            />
          </Grid>
          <Grid item xs={12} sm={3}>
            <TextField
              label="Nombres"
              name="name"
              value={formData.name}
              onChange={handleChange}
              fullWidth
              required
              sx={{
                "& .MuiOutlinedInput-root": {
                  "&:hover fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde al pasar el mouse
                  },
                  "&.Mui-focused fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde cuando el campo est√° enfocado
                  },
                },
                "& .MuiInputLabel-root": {
                  color: "#000", // Color del label por defecto
                },
                "& .MuiInputLabel-root.Mui-focused": {
                  color: "#53676c", // Cambia el color del label cuando est√° enfocado
                },
              }}
              autoComplete="off"
            />
          </Grid>
          <Grid item xs={12} sm={3}>
            <TextField
              label="Apellidos"
              name="lastName"
              value={formData.lastName}
              onChange={handleChange}
              fullWidth
              required
              sx={{
                "& .MuiOutlinedInput-root": {
                  "&:hover fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde al pasar el mouse
                  },
                  "&.Mui-focused fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde cuando el campo est√° enfocado
                  },
                },
                "& .MuiInputLabel-root": {
                  color: "#000", // Color del label por defecto
                },
                "& .MuiInputLabel-root.Mui-focused": {
                  color: "#53676c", // Cambia el color del label cuando est√° enfocado
                },
              }}
              autoComplete="off"
            />
          </Grid>
          <Grid item xs={12} sm={3}>
            <FormControl fullWidth required
               sx={{
                "& .MuiOutlinedInput-root": {
                  "&:hover fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde al pasar el mouse
                  },
                  "&.Mui-focused fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde cuando el campo est√° enfocado
                  },
                },
                "& .MuiInputLabel-root": {
                  color: "#000", // Color del label por defecto
                },
                "& .MuiInputLabel-root.Mui-focused": {
                  color: "#53676c", // Cambia el color del label cuando est√° enfocado
                },
              }}
            >
              <InputLabel htmlFor="professional_college">Colegio profesional</InputLabel>
              <Select
                label="Colegio profesional"
                name="professional_college"
                value={formData.professional_college}
                onChange={handleChange}
                inputProps={{ id: "professional_college" }}
                autoComplete="off"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    "& fieldset": {
                      borderColor: "#000", // Color del borde por defecto
                    },
                    "&:hover fieldset": {
                      borderColor: "#53676c", // Color del borde al pasar el mouse
                    },
                    "&.Mui-focused fieldset": {
                      borderColor: "#53676c", // Color del borde cuando est√° enfocado
                    },
                  },
                  "& .MuiInputLabel-root": {
                    color: "#000", // Color del label por defecto
                  },
                  "& .MuiInputLabel-root.Mui-focused": {
                    color: "#53676c", // Cambia el color del label cuando est√° enfocado
                  },
                }}
              >
                {school.map((data) => (

                  <MenuItem value={data}>{data}</MenuItem>
                ))}
              
              </Select>
            </FormControl>
          </Grid>
        
     
          <Grid item xs={12} sm={3}>
            <TextField
              label="N√∫mero de colegio profesional"
              name="registration_number"
              value={formData.registration_number}
              onChange={handleChange}
              fullWidth
              autoComplete="off"
              required
              sx={{
                "& .MuiOutlinedInput-root": {
                  "&:hover fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde al pasar el mouse
                  },
                  "&.Mui-focused fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde cuando el campo est√° enfocado
                  },
                },
                "& .MuiInputLabel-root": {
                  color: "#000", // Color del label por defecto
                },
                "& .MuiInputLabel-root.Mui-focused": {
                  color: "#53676c", // Cambia el color del label cuando est√° enfocado
                },
              }}
            />
          </Grid>
          {formData.professional_college === "Colegio m√©dico del Per√∫"  ? (
          <>

          <Grid item xs={12} sm={3}>
            <FormControl       sx={{
              width: "100%",
              "& .MuiOutlinedInput-root": {
                  "&:hover fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde al pasar el mouse
                  },
                  "&.Mui-focused fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde cuando el campo est√° enfocado
                  },
                },
                "& .MuiInputLabel-root": {
                  color: "#000", // Color del label por defecto
                },
                "& .MuiInputLabel-root.Mui-focused": {
                  color: "#53676c", // Cambia el color del label cuando est√° enfocado
                },
              }}>
        <InputLabel id="specialties-select-label">Especialidades</InputLabel>
        <Select
          labelId="specialties-select-label"
          id="specialties-select"
          multiple
          name="specialty"
         value={formData.specialty} 
          onChange={handleChange}
          input={<OutlinedInput label="Especialidades" />}
          renderValue={(selected) => selected.join(', ')}
          MenuProps={MenuProps}
          sx={{
            "& .MuiOutlinedInput-root": {
              "& fieldset": {
                borderColor: "#000", // Color del borde por defecto
              },
              "&:hover fieldset": {
                borderColor: "#53676c", // Color del borde al pasar el mouse
              },
              "&.Mui-focused fieldset": {
                borderColor: "#53676c", // Color del borde cuando est√° enfocado
              },
            },
            "& .MuiInputLabel-root": {
              color: "#000", // Color del label por defecto
            },
            "& .MuiInputLabel-root.Mui-focused": {
              color: "#53676c", // Cambia el color del label cuando est√° enfocado
            },
          }}
        >
          {specialtiesMedica.map((specialty) => (
            <MenuItem key={specialty} value={specialty}>
              <Checkbox checked={formData.specialty.includes(specialty)}  />
              <ListItemText primary={specialty} />
            </MenuItem>
          ))}
        </Select>
      </FormControl>
          </Grid>
          <Grid item xs={12} sm={3}>
            <TextField
              label="N√∫mero de especialidad RNE"
              name="specialty_number_rne"
              value={formData.specialty_number_rne}
              onChange={handleChange}
              fullWidth
              required
              autoComplete={false}
              sx={{
                "& .MuiOutlinedInput-root": {
                  "&:hover fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde al pasar el mouse
                  },
                  "&.Mui-focused fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde cuando el campo est√° enfocado
                  },
                },
                "& .MuiInputLabel-root": {
                  color: "#000", // Color del label por defecto
                },
                "& .MuiInputLabel-root.Mui-focused": {
                  color: "#53676c", // Cambia el color del label cuando est√° enfocado
                },
              }}
            />
          </Grid>
          </>
          ): null}

          <Grid item xs={12} sm={3}>
            <FormControl fullWidth required
               sx={{
                "& .MuiOutlinedInput-root": {
                  "&:hover fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde al pasar el mouse
                  },
                  "&.Mui-focused fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde cuando el campo est√° enfocado
                  },
                },
                "& .MuiInputLabel-root": {
                  color: "#000", // Color del label por defecto
                },
                "& .MuiInputLabel-root.Mui-focused": {
                  color: "#53676c", // Cambia el color del label cuando est√° enfocado
                },
              }}
            >
              <InputLabel htmlFor="genre">G√©nero</InputLabel>
              <Select
                label="G√©nero"
                name="genre"
                value={formData.genre}
                onChange={handleChange}
                inputProps={{ id: "genre" }}
                autoComplete="off"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    "& fieldset": {
                      borderColor: "#000", // Color del borde por defecto
                    },
                    "&:hover fieldset": {
                      borderColor: "#53676c", // Color del borde al pasar el mouse
                    },
                    "&.Mui-focused fieldset": {
                      borderColor: "#53676c", // Color del borde cuando est√° enfocado
                    },
                  },
                  "& .MuiInputLabel-root": {
                    color: "#000", // Color del label por defecto
                  },
                  "& .MuiInputLabel-root.Mui-focused": {
                    color: "#53676c", // Cambia el color del label cuando est√° enfocado
                  },
                }}
              >
                <MenuItem value="Masculino">Masculino</MenuItem>
                <MenuItem value="Femenino">Femenino</MenuItem>
                <MenuItem value="Otro">Otro</MenuItem>
              </Select>
            </FormControl>
          </Grid>

        <Grid item xs={12} sm={3} >
                 <LocalizationProvider
                   dateAdapter={AdapterDateFns}
                   adapterLocale={es}
                   
                 >
                   <DatePicker
                     label="Fecha de nacimiento"
                     value={formData.birthdate}
                     
                     onChange={handleDateChange}
                     format="dd/MM/yyyy" // Usa 'MM' en may√∫sculas para el mes
                     slotProps={{
                       textField: {
                         fullWidth: true,
                         required: true,
                         sx: {
                           "& .MuiOutlinedInput-root": {
                             "&:hover fieldset": {
                               borderColor: "#53676c", // Cambia el borde al pasar el mouse
                             },
                             "&.Mui-focused fieldset": {
                               borderColor: "#53676c", // Cambia el borde cuando est√° enfocado
                             },
                             "&.Mui-error fieldset": {
                               borderColor: "#53676c !important", // Evita el borde rojo en caso de error
                             },
                           },
                           "& .MuiInputLabel-root": {
                             color: "#000", // Color del label por defecto
                           },
                           "& .MuiInputLabel-root.Mui-focused": {
                             color: "#53676c", // Color del label cuando est√° enfocado
                           },
                         },
                       },
                     }}
                   />
                 </LocalizationProvider>
               </Grid>

          <Grid item xs={12} sm={3}>
            <TextField
              label="Correo electr√≥nico"
              name="email"
              type="email"
              
              value={formData.email}
              onChange={handleChange}
              fullWidth
              required
              autoComplete="off"
              sx={{
                "& .MuiOutlinedInput-root": {
                  "&:hover fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde al pasar el mouse
                  },
                  "&.Mui-focused fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde cuando el campo est√° enfocado
                  },
                },
                "& .MuiInputLabel-root": {
                  color: "#000", // Color del label por defecto
                },
                "& .MuiInputLabel-root.Mui-focused": {
                  color: "#53676c", // Cambia el color del label cuando est√° enfocado
                },
              }}
            />
          </Grid>
          <Grid item xs={12} sm={3}>
            <TextField
              label="Tel√©fono"
              name="phone"
              type="tel"
              required
              value={formData.phone}
              onChange={handleChange}
              fullWidth
              autoComplete="off"
              sx={{
                "& .MuiOutlinedInput-root": {
                  "&:hover fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde al pasar el mouse
                  },
                  "&.Mui-focused fieldset": {
                    borderColor: "#53676c", // Cambia el color del borde cuando el campo est√° enfocado
                  },
                },
                "& .MuiInputLabel-root": {
                  color: "#000", // Color del label por defecto
                },
                "& .MuiInputLabel-root.Mui-focused": {
                  color: "#53676c", // Cambia el color del label cuando est√° enfocado
                },
              }}
            />
          </Grid>
          <LoadScript googleMapsApiKey={API_KEY} libraries={["places"]}>
                    <Grid item xs={12} sm={3}>
                      <Autocomplete    onLoad={(autocomplete) =>
                            (autocompleteRef.current = autocomplete)
                          } onPlaceChanged={onPlaceChanged}>
                        <TextField
                          label="Pa√≠s"
                          name="country"
                          value={formData.country}
                          onChange={handleChange}
                          autoComplete="none"
                          fullWidth
                          sx={{
                            "& .MuiOutlinedInput-root": {
                              "&:hover fieldset": {
                                borderColor: "#53676c", // Cambia el color del borde al pasar el mouse
                              },
                              "&.Mui-focused fieldset": {
                                borderColor: "#53676c", // Cambia el color del borde cuando el campo est√° enfocado
                              },
                            },
                            "& .MuiInputLabel-root": {
                              color: "#000", // Color del label por defecto
                            },
                            "& .MuiInputLabel-root.Mui-focused": {
                              color: "#53676c", // Cambia el color del label cuando est√° enfocado
                            },
                          }}
                        />
                      </Autocomplete>
                    </Grid>
                  </LoadScript>
        
                  <LoadScript googleMapsApiKey={API_KEY} libraries={["places"]}>
                    <Grid item xs={12} sm={3}>
                      <Autocomplete    onLoad={(autocomplete) =>
                            (autocompleteRef.current = autocomplete)
                          } onPlaceChanged={onPlaceChanged}>
                    <TextField
                      label="Departamento"
                      name="department"
        
                      value={formData.department}
                      onChange={handleChange}
                      fullWidth
                      sx={{
                        "& .MuiOutlinedInput-root": {
                          "&:hover fieldset": {
                            borderColor: "#53676c", // Cambia el color del borde al pasar el mouse
                          },
                          "&.Mui-focused fieldset": {
                            borderColor: "#53676c", // Cambia el color del borde cuando el campo est√° enfocado
                          },
                        },
                        "& .MuiInputLabel-root": {
                          color: "#000", // Color del label por defecto
                        },
                        "& .MuiInputLabel-root.Mui-focused": {
                          color: "#53676c", // Cambia el color del label cuando est√° enfocado
                        },
                      }}
                    />
                   </Autocomplete>
                    </Grid>
                  </LoadScript>
                  <LoadScript googleMapsApiKey={API_KEY} libraries={["places"]}>
                    <Grid item xs={12} sm={3}>
                      <Autocomplete    onLoad={(autocomplete) =>
                            (autocompleteRef.current = autocomplete)
                          } onPlaceChanged={onPlaceChanged}>
                    <TextField
                      label="Provincia"
                      name="province"
                      value={formData.province}
                      onChange={handleChange}
                      fullWidth
                      autoComplete="off"
                      sx={{
                        "& .MuiOutlinedInput-root": {
                          "&:hover fieldset": { borderColor: "#53676c" },
                          "&.Mui-focused fieldset": { borderColor: "#53676c" },
                        },
                        "& .MuiInputLabel-root": { color: "#000" },
                        "& .MuiInputLabel-root.Mui-focused": { color: "#53676c" },
                      }}
                    />
                 </Autocomplete>
                    </Grid>
                  </LoadScript>
        
                  <LoadScript googleMapsApiKey={API_KEY} libraries={["places"]}>
                    <Grid item xs={12} sm={3}>
                      <Autocomplete    onLoad={(autocomplete) =>
                            (autocompleteRef.current = autocomplete)
                          } onPlaceChanged={onPlaceChanged}>
                        <TextField
            
                          label="Distrito"
                          name="district"
                          value={formData.district}
                          onChange={handleChange}
                          fullWidth
                          autoComplete="off"
                          sx={{
                            "& .MuiOutlinedInput-root": {
                              "&:hover fieldset": {
                                borderColor: "#53676c", // Cambia el color del borde al pasar el mouse
                              },
                              "&.Mui-focused fieldset": {
                                borderColor: "#53676c", // Cambia el color del borde cuando el campo est√° enfocado
                              },
                            },
                            "& .MuiInputLabel-root": {
                              color: "#000", // Color del label por defecto
                            },
                            "& .MuiInputLabel-root.Mui-focused": {
                              color: "#53676c", // Cambia el color del label cuando est√° enfocado
                            },
                          }}
                        />
                     </Autocomplete>
                    </Grid>
                  </LoadScript>
        
        
          <Grid item xs={12} sm={3}>
  <TextField
    label="Contrase√±a"
    name="password"
    type={showPassword ? "text" : "password"}
    value={formData.password}
    onChange={handleChange}
    fullWidth
    autoComplete="off"
    required
    InputProps={{
      endAdornment: (
        <InputAdornment position="end">
          <IconButton onClick={handleClickShowPassword} edge="end">
            {showPassword ? <VisibilityOff /> : <Visibility />}
          </IconButton>
        </InputAdornment>
      ),
    }}
    sx={{
      "& .MuiOutlinedInput-root": {
        "&:hover fieldset": { borderColor: "#53676c" },
        "&.Mui-focused fieldset": { borderColor: "#53676c" },
      },
      "& .MuiInputLabel-root": { color: "#000" },
      "& .MuiInputLabel-root.Mui-focused": { color: "#53676c" },
    }}
  />
</Grid>;
          {formData.professional_college === "Colegio m√©dico del Per√∫" || formData.professional_college === "Colegio de enfermeros del Per√∫" || formData.professional_college === "Colegio odontol√≥gico del Per√∫"  ? (

          <Grid item xs={12}>
  <FormControl component="fieldset"
  >
    <span>¬øDeseas atender consultas de urgencias de manera virtuales y a domicilio?(La solicitud te llegara por WhatsApp)</span>
    <RadioGroup
      row
      name="emergencyServices"
      value={formData.emergencyServices}
      onChange={(e) => setFormData({ ...formData, emergencyServices: e.target.value })}
    >
      <FormControlLabel value="s√≠" control={<Radio sx={{ '&.Mui-checked': { color: '#53676c' } }} />}  label="S√≠" />
      <FormControlLabel value="no" control={<Radio sx={{ '&.Mui-checked': { color: '#53676c' } }} />} label="No" />
    </RadioGroup>
  </FormControl>
  
</Grid>
          ): null }

          <Grid item xs={12}>
            <FormControlLabel
              control={
                <Checkbox
                  checked={formData.termsAccepted}
                  onChange={handleCheckboxChange}
                  required
                  sx={{ '&.Mui-checked': { color: '#53676c' } }}
                />
              }
              label="Acepto los t√©rminos y condiciones"
            />
                                     <Link to="/terminos-condiciones">t√©rminos y condiciones</Link>
            
          </Grid>
          <Grid item xs={12} sx={{ display: "flex", justifyContent: "center" }}>
            <Button
              type="submit"
              variant="contained"
              color="primary"
              sx={{
                width: 800,
                height:40,
                backgroundColor: "#53676c",
                ":hover": { backgroundColor: "#8ca7a6" },
              }}
            >

{loading ? (
                  <CircularProgress
                    size={25}
                    thickness={5}
                    sx={{ color: "#fff" }}
                  />
                ) : (
                  "Registrarse"
                )}
            </Button>
          </Grid>
          <Snackbar
          
          open={openAlertError} autoHideDuration={4000} onClose={handleCloseAlertError}>
        <Alert
          onClose={handleCloseAlertError}
          severity="error"
          variant="filled"
        >
            El profesional ya est√° registrado. Por favor, intente con otro correo electr√≥nico.
        </Alert>
      </Snackbar>


        </Grid>
      </form>
    </LocalizationProvider>
  );
};

export default ProfessionalRegistration;
